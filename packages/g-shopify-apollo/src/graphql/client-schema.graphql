interface ShopifyNode {
    id:ID!
    handle:String
    position:Int
}
interface ShopifyProductNode {
    product_id: ID!
    product:Product
}
extend type ProductVariant implements ShopifyNode & ShopifyProductNode {
    isInCart: Boolean!
    handle:String
    position:Int
    product_id: ID!
}
extend type ProductOption implements ShopifyNode & ShopifyProductNode{
    handle:String
    title:String
    position:Int
    product_id: ID!
    product:Product
    option_values:[ProductOptionValue]
}
extend type Image implements ShopifyProductNode{
    position:Int
    product_id: ID!
    product:Product
    variants:[ProductVariant]
}

type ProductOptionValue implements ShopifyNode{
    id:ID!
    handle: String
    title: String
    parent_handle: String
    position:Int
    option_id:ID!
    option: ProductOption
    variants:[ProductVariant]
}
type VariantOption {
    option_value_id: ID!
    option_value:ProductOptionValue
    variant_id : ID!
    variant:ProductVariant
}
type ProductInstance {
    id: ID!
    quantity: Int!
    customAttributes : [Attribute]
    variant : ProductVariant
    product: Product
}
type ProductGroup {
    id: ID!
    available:Boolean
    items: [ProductInstance]
}
extend type Product {
    available:Boolean
    variant(index:Int!) : ProductVariant
}

#
# This query gives a list of possible node types
#
query possibleNodes($id: ID!) {
    node(id: $id) {
        ...ProductFragment
    }
}

query variantByIndex($handle: String!, $index:Int!) {
    product(handle: $handle) {
        id
        handle
        variant(index:$index) @client{
            handle @client
            title
            quantityAvailable
        }
        variants(first: 250){
            edges {
                node {
                    title
                }
            }
        }
    }
}

