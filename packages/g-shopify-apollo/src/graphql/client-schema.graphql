directive @client on FIELD_DEFINITION
directive @uppercase on FIELD_DEFINITION

interface Extended_ID  {
    gid : String
    sid : Int
    cacheID:String
}

interface ShopifyNode {
    handle:String
    position:Int
}

interface ShopifyProductNode {
    product_id: ID
    product:Product
}

input VariantFilter {
    index:Int
    id:ID
}

extend type Product implements Extended_ID{
    available:Boolean
    variant(index:Int!) : [ProductVariant!]  @client
    gid : String @client
    sid : Int @client
    cacheID:String! @client

    variantByFilter(input:VariantFilter):ProductVariant @client
    Variants: [ProductVariant!] @client
    Images: [Image!] @client
}

extend type ProductVariant implements ShopifyNode & ShopifyProductNode & Extended_ID {
    isInCart: Boolean!
    handle:String
    position:Int
    product_id: ID
    image_id:ID!

    selected_option_values:[ProductOptionValue!]

    gid : String
    sid : Int
    cacheID:String @client
}
extend type ProductOption implements ShopifyNode & ShopifyProductNode{
    handle:String
    title:String
    position:Int
    product_id: ID
    product:Product
    option_values:[ProductOptionValue!]
}
extend type Image implements ShopifyProductNode{
    position:Int
    product_id: ID
    product:Product
    variants:[ProductVariant!]
}

type ProductOptionValue implements ShopifyNode{
    handle: String
    title: String
    parent_handle: String
    position:Int
    option_id:ID!
    option: ProductOption
    variants:[ProductVariant!]
}
type VariantOption {
    option_value_id: ID!
    option_value:ProductOptionValue
    variant_id : ID!
    variant:ProductVariant
}
type ProductInstance {
    id: ID!
    quantity: Int!
    customAttributes : [Attribute!]
    variant : ProductVariant
    product: Product
}
type ProductGroup {
    id: ID!
    available:Boolean
    items: [ProductInstance!]
}



query testproductop {
    allVariants @client{
        id
        __typename
        title
    }
}

#
# This query gives a list of possible node types
#
query possibleNodes($id: ID!) {
    node(id: $id) {
        ...ProductFragment
    }
}





query variantByIndex($handle: String!, $index:Int!) {
    productAlias:product(handle: $handle) {
        id
        handle


    }
}

extend type QueryRoot{
    testProduct(index:Int!) : Product
    testOption(index:Int!) : ProductOption
    allVariants: [ProductVariant] @client
}


